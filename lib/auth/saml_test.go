/*
Copyright 2019-2021 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package auth

import (
	"context"
	"crypto/tls"
	"crypto/x509"
	"testing"
	"time"

	"github.com/gravitational/teleport/api/types"
	authority "github.com/gravitational/teleport/lib/auth/testauthority"
	"github.com/gravitational/teleport/lib/backend"
	"github.com/gravitational/teleport/lib/backend/lite"
	"github.com/gravitational/teleport/lib/fixtures"
	"github.com/gravitational/teleport/lib/services"
	"github.com/gravitational/teleport/lib/utils"

	"github.com/jonboulle/clockwork"
	saml2 "github.com/russellhaering/gosaml2"
	dsig "github.com/russellhaering/goxmldsig"
	"gopkg.in/check.v1"
)

type SAMLSuite struct {
	a *Server
	b backend.Backend
	c clockwork.FakeClock
}

var _ = check.Suite(&SAMLSuite{})

func (s *SAMLSuite) SetUpSuite(c *check.C) {
	utils.InitLoggerForTests(testing.Verbose())

	s.c = clockwork.NewFakeClockAt(time.Now())

	var err error
	s.b, err = lite.NewWithConfig(context.Background(), lite.Config{
		Path:             c.MkDir(),
		PollStreamPeriod: 200 * time.Millisecond,
		Clock:            s.c,
	})
	c.Assert(err, check.IsNil)

	clusterName, err := services.NewClusterName(services.ClusterNameSpecV2{
		ClusterName: "me.localhost",
	})
	c.Assert(err, check.IsNil)

	authConfig := &InitConfig{
		ClusterName:            clusterName,
		Backend:                s.b,
		Authority:              authority.New(),
		SkipPeriodicOperations: true,
	}
	s.a, err = NewServer(authConfig)
	c.Assert(err, check.IsNil)
}

func (s *SAMLSuite) TestCreateSAMLUser(c *check.C) {
	// Create SAML user with 1 minute expiry.
	_, err := s.a.createSAMLUser(&createUserParams{
		connectorName: "samlService",
		username:      "foo@example.com",
		logins:        []string{"foo"},
		roles:         []string{"admin"},
		sessionTTL:    1 * time.Minute,
	})
	c.Assert(err, check.IsNil)

	// Within that 1 minute period the user should still exist.
	_, err = s.a.GetUser("foo@example.com", false)
	c.Assert(err, check.IsNil)

	// Advance time 2 minutes, the user should be gone.
	s.c.Advance(2 * time.Minute)
	_, err = s.a.GetUser("foo@example.com", false)
	c.Assert(err, check.NotNil)
}

// This Base64 encoded XML blob is a signed SAML response with an encrypted assertion for testing decryption and parsing.
const EncryptedResponse = ``

// This XML blob is a sample EntityDescriptor made to satisfy the connector validator for testing.
const EntityDescriptor = `<EntityDescriptor ID="_2240bd9c-30c4-4d2a-ab3e-87a94ea334fd" entityID="http://some.entity.id"
xmlns="urn:oasis:names:tc:SAML:2.0:metadata">
<SPSSODescriptor WantAssertionsSigned="true" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
<KeyDescriptor use="signing">
	<KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#">
		<X509Data>
			<X509Certificate>
				MIIDKjCCAhKgAwIBAgIQJtJDJZZBkg/afM8d2ZJCTjANBgkqhkiG9w0BAQsFADBA
				MRUwEwYDVQQKEwxUZWxlcG9ydCBPU1MxJzAlBgNVBAMTHnRlbGVwb3J0LmxvY2Fs
				aG9zdC5sb2NhbGRvbWFpbjAeFw0xNzA1MDkxOTQwMzZaFw0yNzA1MDcxOTQwMzZa
				MEAxFTATBgNVBAoTDFRlbGVwb3J0IE9TUzEnMCUGA1UEAxMedGVsZXBvcnQubG9j
				YWxob3N0LmxvY2FsZG9tYWluMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
				AQEAuKFLaf2iII/xDR+m2Yj6PnUEa+qzqwxsdLUjnunFZaAXG+hZm4Ml80SCiBgI
				gTHQlJyLIkTtuRoH5aeMyz1ERUCtii4ZsTqDrjjUybxP4r+4HVX6m34s6hwEr8Fi
				fts9pMp4iS3tQguRc28gPdDo/T6VrJTVYUfUUsNDRtIrlB5O9igqqLnuaY9eqGi4
				PUx0G0wRYJpRywoj8G0IkpfQTiX+CAC7dt5ws7ZrnGqCNBLGi5bGsaMmptVbsSEp
				1TenntF54V1iR49IV5JqDhm1S0HmkleoJzKdc+6sP/xNepz9PJzuF9d9NubTLWgB
				sK28YItcmWHdHXD/ODxVaehRjwIDAQABoyAwHjAOBgNVHQ8BAf8EBAMCB4AwDAYD
				VR0TAQH/BAIwADANBgkqhkiG9w0BAQsFAAOCAQEAAVU6sNBdj76saHwOxGSdnEqQ
				o2tMuR3msSM4F6wFK2UkKepsD7CYIf/PzNSNUqA5JIEUVeMqGyiHuAbU4C655nT1
				IyJX1D/+r73sSp5jbIpQm2xoQGZnj6g/Kltw8OSOAw+DsMF/PLVqoWJp07u6ew/m
				NxWsJKcZ5k+q4eMxci9mKRHHqsquWKXzQlURMNFI+mGaFwrKM4dmzaR0BEc+ilSx
				QqUvQ74smsLK+zhNikmgjlGC5ob9g8XkhVAkJMAh2rb9onDNiRl68iAgczP88mXu
				vN/o98dypzsPxXmw6tkDqIRPUAUbh465rlY5sKMmRgXi2rUfl/QV5nbozUo/HQ==
			</X509Certificate>
		</X509Data>
	</KeyInfo>
</KeyDescriptor>
<AssertionConsumerService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
		Location="https://my.site/saml/acs"/>
</SPSSODescriptor>
</EntityDescriptor>`

func (s *SAMLSuite) TestEncryptedSAML(c *check.C) {
	connector := services.NewSAMLConnector("spongebob", types.SAMLConnectorSpecV2{})

	connector.SetEntityDescriptor(EntityDescriptor)
	connector.SetIssuer("nil")
	connector.SetSSO("nil")
	connector.SetAssertionConsumerService("nil")

	signingKeypair := &types.SigningKeyPair{
		Cert:       fixtures.SigningCertPEM,
		PrivateKey: fixtures.SigningKeyPEM,
	}
	connector.SetSigningKeyPair(signingKeypair)

	encryptionKeypair := &types.EncryptionKeyPair{
		Cert:       fixtures.EncryptionCertPEM,
		PrivateKey: fixtures.EncryptionKeyPEM,
	}
	connector.SetEncryptionKeyPair(encryptionKeypair)

	cert, err := tls.X509KeyPair([]byte(signingKeypair.Cert), []byte(signingKeypair.PrivateKey))
	c.Assert(err, check.IsNil)

	leaf, err := x509.ParseCertificate(cert.Certificate[0])
	c.Assert(err, check.IsNil)

	signingKeyStore, err := utils.ParseSigningKeyStorePEM(signingKeypair.PrivateKey, signingKeypair.Cert)
	c.Assert(err, check.IsNil)

	encryptionKeyStore, err := utils.ParseSigningKeyStorePEM(encryptionKeypair.PrivateKey, encryptionKeypair.Cert)
	c.Assert(err, check.IsNil)

	certStore := dsig.MemoryX509CertificateStore{
		Roots: []*x509.Certificate{leaf},
	}

	provider := &saml2.SAMLServiceProvider{
		IdentityProviderSSOURL:      "",
		IdentityProviderIssuer:      "",
		ServiceProviderIssuer:       "http://example.com/saml/acs/example",
		AssertionConsumerServiceURL: "http://sp.example.com/demo1/index.php?acs",
		SignAuthnRequests:           true,
		AudienceURI:                 "http://example.com/saml/acs/example",
		IDPCertificateStore:         &certStore,
		SPKeyStore:                  encryptionKeyStore,
		SPSigningKeyStore:           signingKeyStore,
	}

	response, err := provider.ValidateEncodedResponse(EncryptedResponse)
	c.Assert(err, check.IsNil)

	assertionInfo, err := RetrieveAssertionInfo(provider, connector, response)
	c.Assert(err, check.IsNil)
	if len(assertionInfo.Assertions) == 0 {
		c.Error("no assertion found")
	}
}
